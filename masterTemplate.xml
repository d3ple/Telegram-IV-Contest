~version: "2.0"


?path: /.+
#### unsupported content ####


#### rudimentary content ####
@replace("\u00a0", " "): $body//text()
<br>: //p[not(normalize-space(text()))][not(descendant::*)]


#### main ####
site_name: ""
body: //article
title:  //h1
subtitle: //h2
cover: //img
author: //p

@datetime(0, "en-US", "hh:mm a, LLL dd, yyyy"): //div[has-class("published")]/text()
published_date: $@


#### set high-res and href for images  ####
@set_attr(href, ".//ancestor::a/@href"): //a[not(contains(translate(@href, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'), ".jpg") 
                                              or contains(translate(@href, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'), ".png") 
                                              or contains(translate(@href, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'), ".jpeg"))]//img
@set_attr(src, ".//ancestor::a/@href"): //a[contains(translate(@href, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'), ".jpg") 
                                              or contains(translate(@href, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'), ".png") 
                                              or contains(translate(@href, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'), ".jpeg")]//img

## srcset v1
@map( $body//img[@srcset] ) {
  $cur: $@
  @append(<div>): //head
  $box: $@
  @while( $cur[string-length(@srcset)>0] ) {
    @clone: $cur
    $src: $@
    @append_to($box): $src
    
    @set_attr(src, @srcset): $src
    @match(".+?\\s"): $src/@src
    @match("(?:\\s|^).+?(\\d+)w", 1): $src/@srcset
    @match(".+?,(.+)", 1): $cur/@srcset
  }
  @set_attr(src, $box/img[not(../img/@srcset>@srcset)]/@src): $cur
}

## srcset v2
@replace("(http.+?)(?=\\d+w)(\\d+)w(?:,|$)", "<link src=$1 res=$2>"): $body//img/@srcset
@append(@srcset): $body//img[@srcset]
@html_to_dom: $@
@set_attr(src, .//link[not(../link/@res>@res)]/@src): $body//img[@srcset]


#### related article ####
@debug: //*[contains(translate(text(), 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'), 'also read')]


#### fix nested ####
<pic>: //table//img
<pic>: //blockquote//img

$problems: $body
@while( $problems ) {
  $test: $body//*[self::blockquote or self::aside or self::figure or (self::img and not(./ancestor::figure)) or (self::video and not(./ancestor::figure)) or self::iframe or self::audio or self::slideshow or self::related or self::footer or self::table[not(ancestor::table) and not(descendant::table)]]
  $problems: $test/self::*[ancestor::anchor or ancestor::blockquote or ancestor::aside or ancestor::footer or ancestor::strong or ancestor::b or ancestor::em or ancestor::i or ancestor::ins or ancestor::u or ancestor::del or ancestor::s or ancestor::strike or ancestor::code or ancestor::kbd or ancestor::samp or ancestor::tt or ancestor::mark or ancestor::sup or ancestor::pic or ancestor::sub or ancestor::a or ancestor::reference or ancestor::h1 or ancestor::h2 or ancestor::h3 or ancestor::h4 or ancestor::h5 or ancestor::h6 or ancestor::p or ancestor::pre or ancestor::hr or ancestor::img or ancestor::br]
 
  @if( $problems ) {
    $parent: $problems/parent::*
    @detach: $parent/node()
    @set_attr("merge", $index): $@
    <remove>: $parent
    @after_el("./parent::*"): $problems
    @combine: $body//self::*[prev-sibling::*/@merge = @merge]
  }
}
